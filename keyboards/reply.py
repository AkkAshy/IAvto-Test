from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config.config import LANG_FILES
import logging

logger = logging.getLogger(__name__)

def get_phone_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]]
    return ReplyKeyboardMarkup(keyboard=keyboard, one_time_keyboard=True, resize_keyboard=True)

def get_test_selection_keyboard(tests_json):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Å—Ç–æ–≤ –ø–æ ID.
    –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ —Å –µ–≥–æ ID.
    """
    try:
        logger.info(f"get_test_selection_keyboard received data type: {type(tests_json)}")
        logger.info(f"Tests JSON length: {len(tests_json) if tests_json else 0}")
        
        buttons = []

        # –ë–µ—Ä—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —à–∞–±–ª–æ–Ω–æ–≤ —Ç–µ—Å—Ç–æ–≤
        template_ids = set()  # –∏—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        
        for q in tests_json:
            template = q.get('exam_center_test_template')
            if template and isinstance(template, dict):
                template_id = template.get('id')
                if template_id:
                    template_ids.add(template_id)

        logger.info(f"Found unique template IDs: {sorted(template_ids)}")

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        for template_id in sorted(template_ids):
            button_text = f"üìù –¢–µ—Å—Ç ID: {template_id}"
            buttons.append([KeyboardButton(text=button_text)])
            logger.info(f"Created button: {button_text}")

        if not buttons:
            logger.warning("No template IDs found, creating default button")
            buttons.append([KeyboardButton(text="üìù –¢–µ—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")])

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(
            keyboard=buttons,
            resize_keyboard=True
        )

        logger.info(f"Created keyboard with {len(buttons)} buttons")
        return keyboard
        
    except Exception as e:
        logger.error(f"Failed to load tests from JSON: {e}")
        logger.error(f"Exception type: {type(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìù –¢–µ—Å—Ç")]],
            resize_keyboard=True
        )


STOP_BUTTON = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üõë –°—Ç–æ–ø")]],
    resize_keyboard=True
)

def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")],
            [KeyboardButton(text="üåê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫")]
        ],
        resize_keyboard=True
    )

def language_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"üåê {lang.upper()}") for lang in LANG_FILES]
        ]
    )