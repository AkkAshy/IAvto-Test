# from aiogram import Router, F
# from aiogram.types import Message, PollAnswer
# from aiogram.filters import Command
# from sqlalchemy import delete
# from services.quiz_service import load_quiz_data, load_image
# from database.db import add_quiz_progress, update_quiz_progress, get_current_question, get_user, async_session
# from utils.logging import setup_logging
# from database.models import QuizProgress

# router = Router()
# logger = setup_logging()



# @router.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
# async def start_quiz(message: Message):
    
#     logger.info(f"User {message.from_user.id} started quiz")
#     user = await get_user(message.from_user.id)
#     if not user:
#         logger.warning(f"User {message.from_user.id} not registered")
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ /start, –±—Ä–æ! üòé")
#         return
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
#     current_progress = await get_current_question(message.from_user.id)
    
#     # –ß–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON
#     try:
#         quiz_data = await load_quiz_data()
#         logger.info(f"Loaded quiz data with {len(quiz_data[0]['questions'])} questions")
#         # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤–æ–ø—Ä–æ—Å–æ–≤
#         question_ids = [q["id"] for q in quiz_data[0]["questions"]]
#         logger.info(f"Available question IDs: {question_ids}")
#     except Exception as e:
#         logger.error(f"Failed to load quiz data: {e}")
#         await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
#         return
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
#     if not quiz_data or not quiz_data[0].get("questions"):
#         logger.error("Quiz data is empty or has no questions")
#         await message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –±—Ä–æ! üòé")
#         return
    
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
#     if current_progress:
#         # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
#         current_id = current_progress.question_id
#         available_ids = sorted([q["id"] for q in quiz_data[0]["questions"]])
#         next_id = next((id for id in available_ids if id > current_id), None)
#         question_id = next_id if next_id else available_ids[0]  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
#     else:
#         # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID
#         question_id = min(q["id"] for q in quiz_data[0]["questions"])
    
#     logger.info(f"User {message.from_user.id} current question_id: {question_id}")
    
#     # –ò—â–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ ID
#     question = next((q for q in quiz_data[0]["questions"] if q["id"] == question_id), None)
#     if not question:
#         logger.warning(f"No question found for ID {question_id}")
#         await message.answer("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç! –ú–æ–ª–æ–¥–µ—Ü, –±—Ä–æ! üöÄ")
#         return
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å
#     try:
#         await add_quiz_progress(message.from_user.id, question_id)
#         logger.info(f"Added quiz progress for user {message.from_user.id}, question {question_id}")
#     except Exception as e:
#         logger.error(f"Failed to add quiz progress: {e}")
#         await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
#         return
    
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
#     try:
#         question_text = next(item["value"] for item in question["body"] if item["type"] == 1)
#         image_path = next((item["value"] for item in question["body"] if item["type"] == 2), None)
#         logger.info(f"Question {question_id} text: {question_text}, image: {image_path}")
#     except Exception as e:
#         logger.error(f"Failed to parse question {question_id}: {e}")
#         await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
#         return
    
#     # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Quiz-Mode
#     try:
#         options = []
#         correct_option_id = None
        
#         for i, answer in enumerate(question["answers"]):
#             # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ body –º–∞—Å—Å–∏–≤–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–æ–ø—Ä–æ—Å—É)
#             try:
#                 answer_text = next(item["value"] for item in answer["body"] if item["type"] == 1)
#                 options.append(answer_text)
                
#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
#                 if answer["check"] == 1:
#                     correct_option_id = i
                    
#             except Exception as e:
#                 logger.error(f"Failed to parse answer {i} for question {question_id}: {e}")
#                 logger.error(f"Answer structure: {answer}")
#                 continue
        
#         if not options:
#             logger.error(f"No valid options found for question {question_id}")
#             await message.answer("–û—à–∏–±–∫–∞ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
#             return
        
#         if correct_option_id is None:
#             logger.error(f"No correct answer found for question {question_id}")
#             logger.error(f"Answers with check field: {[(i, a.get('check')) for i, a in enumerate(question['answers'])]}")
#             await message.answer("–û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ - –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ! üòé")
#             return
            
#         logger.info(f"Question {question_id} options: {options}, correct: {correct_option_id}")
#     except Exception as e:
#         logger.error(f"Failed to prepare options for question {question_id}: {e}")
#         logger.error(f"Question structure: {question}")
#         await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
#         return
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ Quiz-Mode
#     try:
#         if image_path:
#             # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
#             try:
#                 image_data = await load_image(image_path)
#                 logger.info(f"Loaded image for question {question_id}: {image_path}")
                
#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
#                 await message.answer_photo(
#                     photo=image_data,
#                     caption="–í–æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫ –≤–æ–ø—Ä–æ—Å—É üì∏"
#                 )
#             except Exception as e:
#                 logger.error(f"Failed to load image {image_path}: {e}")
#                 # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Quiz Poll
#         poll_message = await message.answer_poll(
#             question=question_text,
#             options=options,
#             type="quiz",
#             correct_option_id=correct_option_id,
#             is_anonymous=False,
#             explanation="–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è! üß†",
#             open_period=30
#         )
        
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º
#         # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç—Ç–æ–≥–æ
#         logger.info(f"Sent quiz poll {poll_message.poll.id} for question {question_id} to user {message.from_user.id}")
        
#     except Exception as e:
#         logger.error(f"Failed to send quiz poll for question {question_id}: {e}")
#         await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")

# @router.poll_answer()
# async def handle_poll_answer(poll_answer: PollAnswer):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ Quiz Poll"""
#     user_id = poll_answer.user.id
#     selected_option_ids = poll_answer.option_ids
#     poll_id = poll_answer.poll_id
    
#     logger.info(f"User {user_id} answered poll {poll_id} with options: {selected_option_ids}")
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     try:
#         current_progress = await get_current_question(user_id)
#         if not current_progress:
#             logger.warning(f"No current progress found for user {user_id}")
#             return
        
#         question_id = current_progress.question_id
#         logger.info(f"Processing poll answer for user {user_id}, question {question_id}")
        
#         # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
#         quiz_data = await load_quiz_data()
#         question = next((q for q in quiz_data[0]["questions"] if q["id"] == question_id), None)
        
#         if not question:
#             logger.warning(f"No question found for ID {question_id}")
#             return
        
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥ —Ç–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
#         correct_answer_index = None
#         for i, answer in enumerate(question["answers"]):
#             if answer.get("check") == 1:
#                 correct_answer_index = i
#                 break
        
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#         is_correct = correct_answer_index in selected_option_ids
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
#         await update_quiz_progress(user_id, question_id, 1 if is_correct else 0)
#         logger.info(f"Updated quiz progress for user {user_id}, question {question_id}, correct: {is_correct}")
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ Telegram —Å–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
#         # –ù–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é
#         if is_correct:
#             await poll_answer.bot.send_message(
#                 user_id, 
#                 "–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –±—Ä–æ! üéâ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º? /quiz"
#             )
#         else:
#             await poll_answer.bot.send_message(
#                 user_id, 
#                 "–ù–µ —É–≥–∞–¥–∞–ª, –±—Ä–æ! üòÖ –ù–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! /quiz"
#             )
            
#     except Exception as e:
#         logger.error(f"Failed to process poll answer for user {user_id}: {e}")
#         try:
#             await poll_answer.bot.send_message(
#                 user_id, 
#                 "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé"
#             )
#         except:
#             pass

# @router.message(Command("reset"))
# async def reset_progress(message: Message):
#     logger.info(f"User {message.from_user.id} requested progress reset")
#     user = await get_user(message.from_user.id)
#     if not user:
#         logger.warning(f"User {message.from_user.id} not registered")
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ /start, –±—Ä–æ! üòé")
#         return
    
#     try:
#         async with async_session() as session:
#             async with session.begin():
#                 await session.execute(
#                     delete(QuizProgress).filter_by(telegram_id=message.from_user.id)
#                 )
#                 await session.commit()
#         logger.info(f"Progress reset for user {message.from_user.id}")
#         await message.answer("–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω, –±—Ä–æ! –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É? /quiz")
#     except Exception as e:
#         logger.error(f"Failed to reset progress for user {message.from_user.id}: {e}")
#         await message.answer("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")

# @router.message(Command("list_questions"))
# async def list_questions(message: Message):
#     logger.info(f"User {message.from_user.id} requested question list")
#     try:
#         quiz_data = await load_quiz_data()
#         question_ids = [q["id"] for q in quiz_data[0]["questions"]]
#         logger.info(f"Question IDs for user {message.from_user.id}: {question_ids}")
#         await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤–æ–ø—Ä–æ—Å–æ–≤: {question_ids}")
#     except Exception as e:
#         logger.error(f"Failed to list questions: {e}")
#         await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")

import os
from aiogram import Router, F
from aiogram.types import Message, PollAnswer
from aiogram.filters import Command
from sqlalchemy import delete
from services.quiz_service import load_quiz_data, load_image
from database.db import add_quiz_progress, update_quiz_progress, get_current_question, get_user, async_session, get_user_language
from utils.logging import setup_logging
from database.models import QuizProgress
from keyboards.reply import get_test_selection_keyboard, STOP_BUTTON
from config.config import LANG_FILES

router = Router()
logger = setup_logging()



async def send_next_question(user_id: int, bot, test_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    current_progress = await get_current_question(user_id)
    
    # –ß–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON
    try:
        lang_code = await get_user_language(user_id)
        quiz_data = await load_quiz_data(lang=lang_code)
        logger.info(f"Loaded quiz data with {len(quiz_data[0]['questions'])} questions")
        question_ids = [q["id"] for q in quiz_data[0]["questions"]]
        logger.info(f"Available question IDs: {question_ids}")
    except Exception as e:
        logger.error(f"Failed to load quiz data: {e}")
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    if not quiz_data or not quiz_data[0].get("questions"):
        logger.error("Quiz data is empty or has no questions")
        await bot.send_message(user_id, "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –±—Ä–æ! üòé")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if current_progress:
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        current_id = current_progress.question_id
        available_ids = sorted([q["id"] for q in quiz_data[0]["questions"]])
        next_id = next((id for id in available_ids if id > current_id), None)
        
        if not next_id:
            # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            await bot.send_message(user_id, "üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–æ–ª–æ–¥–µ—Ü, –±—Ä–æ! üöÄ\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞: /reset –∑–∞—Ç–µ–º /quiz")
            return False
            
        question_id = next_id
    else:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID
        question_id = min(q["id"] for q in quiz_data[0]["questions"])
    
    logger.info(f"User {user_id} next question_id: {question_id}")
    
    # –ò—â–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ ID
    question = next((q for q in quiz_data[0]["questions"] if q["id"] == question_id), None)
    if not question:
        logger.warning(f"No question found for ID {question_id}")
        await bot.send_message(user_id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç! –ú–æ–ª–æ–¥–µ—Ü, –±—Ä–æ! üöÄ")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å
    try:
        await add_quiz_progress(user_id, question_id)
        logger.info(f"Added quiz progress for user {user_id}, question {question_id}")
    except Exception as e:
        logger.error(f"Failed to add quiz progress: {e}")
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    try:
        question_text = next(item["value"] for item in question["body"] if item["type"] == 1)
        image_path = next((item["value"] for item in question["body"] if item["type"] == 2), None)
        logger.info(f"Question {question_id} text: {question_text}, image: {image_path}")
    except Exception as e:
        logger.error(f"Failed to parse question {question_id}: {e}")
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Quiz-Mode
    try:
        options = []
        correct_option_id = None
        
        for i, answer in enumerate(question["answers"]):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ body –º–∞—Å—Å–∏–≤–∞
            try:
                answer_text = next(item["value"] for item in answer["body"] if item["type"] == 1)
                options.append(answer_text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                if answer["check"] == 1:
                    correct_option_id = i
                    
            except Exception as e:
                logger.error(f"Failed to parse answer {i} for question {question_id}: {e}")
                continue
        
        if not options:
            logger.error(f"No valid options found for question {question_id}")
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
            return False
        
        if correct_option_id is None:
            logger.error(f"No correct answer found for question {question_id}")
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ - –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ! üòé")
            return False
            
        logger.info(f"Question {question_id} options: {options}, correct: {correct_option_id}")
    except Exception as e:
        logger.error(f"Failed to prepare options for question {question_id}: {e}")
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ Quiz-Mode
    try:
        if image_path:
            try:
                image_data = await load_image(image_path)
                await bot.send_photo(user_id, photo=image_data)
            except Exception as e:
                logger.error(f"Image load failed: {e}")
   


        full_text = f"‚ùì {question_text}\n\n" + "\n".join(
            [f"{i+1}. {opt}" for i, opt in enumerate(options)]
        )

        await bot.send_message(user_id, full_text)

        # –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞
        poll_options = [str(i+1) for i in range(len(options))]
        poll_message = await bot.send_poll(
            chat_id=user_id,
            question="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ üëá",   # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            options=poll_options,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=False
        )
        logger.info(f"Sent quiz poll {poll_message.poll.id} for question {question_id} to user {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to send quiz poll for question {question_id}: {e}")
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")
        return False
    
@router.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
async def start_quiz(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ /start, –±—Ä–æ! üòé")
        return

    # –ë–µ—Ä–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang_code = await get_user_language(message.from_user.id)
    if not lang_code:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ —á–µ—Ä–µ–∑ üåê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ üòé")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JSON –¥–ª—è —è–∑—ã–∫–∞
    import os

    file_path = LANG_FILES.get(lang_code)
    print(f"lang_code={lang_code}, file_path={file_path}, exists={os.path.isfile(file_path)}")

    if not file_path:
        logger.error(f"No quiz file mapped for language: {lang_code}")
        await message.answer("–î–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤ üò¢")
        return
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    try:
        tests_json = await load_quiz_data(lang_code)
    except Exception as e:
        user_id = message.from_user.id
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è {lang_code}: {e}")
        lang_code = await get_user_language(message.from_user.id)
        logger.error(f"Failed to get user language for user {user_id}, ger: {lang_code}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤ üò¢")
        return

    if not tests_json:
        await message.answer("–¢–µ—Å—Ç—ã –ø–æ–∫–∞ –ø—É—Å—Ç—ã üò¢")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_test_selection_keyboard(tests_json)

    await message.answer(
        f"–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–∞ ({lang_code.upper()}):",
        reply_markup=keyboard
    )
import re


# 2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
@router.message(F.text.startswith("üìù "))
async def select_test(message: Message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –∏–∑ JSON
    try:
        lang_code = await get_user_language(message.from_user.id)
        tests_json = await load_quiz_data(lang_code) 
        logger.info(f"Loaded {len(tests_json)} tests from JSON")
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç—ã üò¢")
        logger.error("Failed to load tests from JSON")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    match = re.search(r'\d+', message.text)
    if not match:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ—Å—Ç–∞.")
        return

    test_id = int(match.group())
    try:
        test_id = test_id
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ—Å—Ç–∞.")
        return

    # –ò—â–µ–º —Ç–µ—Å—Ç –ø–æ ID
    selected_test = next(
        (t for t in tests_json if t.get('exam_center_test_template', {}).get('id') == test_id),
        None
    )
    print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π ID: {test_id}")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ ID: {[t.get('exam_center_test_template', {}).get('id') for t in tests_json]}")

    
    if not selected_test:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await message.answer("–¢–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è! –ù–∞–∂–º–∏ üõë –°—Ç–æ–ø, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.", reply_markup=STOP_BUTTON)
    user_id = message.from_user.id
    # –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–µ—Å—Ç—É
    await send_next_question(user_id, message.bot, test_id=test_id)

@router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ Quiz Poll –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    user_id = poll_answer.user.id
    selected_option_ids = poll_answer.option_ids
    poll_id = poll_answer.poll_id
    
    logger.info(f"User {user_id} answered poll {poll_id} with options: {selected_option_ids}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        current_progress = await get_current_question(user_id)
        if not current_progress:
            logger.warning(f"No current progress found for user {user_id}")
            return
        
        question_id = current_progress.question_id
        logger.info(f"Processing poll answer for user {user_id}, question {question_id}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        lang_code = await get_user_language(user_id)
        quiz_data = await load_quiz_data(lang=lang_code)
        question = next((q for q in quiz_data[0]["questions"] if q["id"] == question_id), None)
        
        if not question:
            logger.warning(f"No question found for ID {question_id}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥ —Ç–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
        correct_answer_index = None
        for i, answer in enumerate(question["answers"]):
            if answer.get("check") == 1:
                correct_answer_index = i
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_correct = correct_answer_index in selected_option_ids
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await update_quiz_progress(user_id, question_id, 1 if is_correct else 0)
        logger.info(f"Updated quiz progress for user {user_id}, question {question_id}, correct: {is_correct}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        result_message = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
        await poll_answer.bot.send_message(user_id, result_message)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        import asyncio
        await asyncio.sleep(1)
        
        success = await send_next_question(user_id, poll_answer.bot, test_id=current_progress.test_id)
        if not success:
            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            logger.info(f"Quiz completed for user {user_id}")
            
    except Exception as e:
        logger.error(f"Failed to process poll answer for user {user_id}: {e}")
        try:
            await poll_answer.bot.send_message(
                user_id, 
                "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé"
            )
        except:
            pass

@router.message(Command("reset"))
async def reset_progress(message: Message):
    logger.info(f"User {message.from_user.id} requested progress reset")
    user = await get_user(message.from_user.id)
    if not user:
        logger.warning(f"User {message.from_user.id} not registered")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ /start, –±—Ä–æ! üòé")
        return
    
    try:
        async with async_session() as session:
            async with session.begin():
                await session.execute(
                    delete(QuizProgress).filter_by(telegram_id=message.from_user.id)
                )
                await session.commit()
        logger.info(f"Progress reset for user {message.from_user.id}")
        await message.answer("–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω, –±—Ä–æ! –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É? /quiz")
    except Exception as e:
        logger.error(f"Failed to reset progress for user {message.from_user.id}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")

@router.message(Command("list_questions"))
async def list_questions(message: Message):
    logger.info(f"User {message.from_user.id} requested question list")
    try:
        user_id = message.from_user.id
        lang_code = await get_user_language(user_id)
        quiz_data = await load_quiz_data(lang=lang_code)
        question_ids = [q["id"] for q in quiz_data[0]["questions"]]
        logger.info(f"Question IDs for user {message.from_user.id}: {question_ids}")
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤–æ–ø—Ä–æ—Å–æ–≤: {question_ids}")
    except Exception as e:
        logger.error(f"Failed to list questions: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –±—Ä–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòé")