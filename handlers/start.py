from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ContentType
from keyboards.reply import get_phone_keyboard, main_menu, language_menu
from database.db import get_user, add_user, set_user_language, get_user_language
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config.config import LANG_FILES
import logging
from services.quiz_service import t

logger = logging.getLogger(__name__)
router = Router()

# –ö—ç—à –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–Ω–æ–ø–æ–∫ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
LANGUAGE_BUTTON_CACHE = None
TEST_BUTTON_CACHE = None
STOP_BUTTON_CACHE = None

def get_language_buttons_cache():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–Ω–æ–ø–∫–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫' –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö"""
    global LANGUAGE_BUTTON_CACHE
    if LANGUAGE_BUTTON_CACHE is None:
        LANGUAGE_BUTTON_CACHE = []
        for lang_code in LANG_FILES.keys():
            try:
                translation = t(lang_code, "menu.language")
                if translation and translation != "menu.language":
                    LANGUAGE_BUTTON_CACHE.append(translation)
            except:
                continue
        logger.info(f"Language buttons cache: {LANGUAGE_BUTTON_CACHE}")
    return LANGUAGE_BUTTON_CACHE

def get_test_buttons_cache():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö"""
    global TEST_BUTTON_CACHE
    if TEST_BUTTON_CACHE is None:
        TEST_BUTTON_CACHE = []
        for lang_code in LANG_FILES.keys():
            try:
                translation = t(lang_code, "menu.test")
                if translation and translation != "menu.test":
                    TEST_BUTTON_CACHE.append(translation)
            except:
                continue
        logger.info(f"Test buttons cache: {TEST_BUTTON_CACHE}")
    return TEST_BUTTON_CACHE

def get_stop_buttons_cache():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–Ω–æ–ø–∫–∏ '–°—Ç–æ–ø' –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö"""
    global STOP_BUTTON_CACHE
    if STOP_BUTTON_CACHE is None:
        STOP_BUTTON_CACHE = []
        for lang_code in LANG_FILES.keys():
            try:
                translation = t(lang_code, "menu.stop")
                if translation and translation != "menu.stop":
                    STOP_BUTTON_CACHE.append(translation)
            except:
                continue
        logger.info(f"Stop buttons cache: {STOP_BUTTON_CACHE}")
    return STOP_BUTTON_CACHE

@router.message(CommandStart())
async def start(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –ë–î)
    lang = await get_user_language(message.from_user.id)
    if not lang:
        lang = "kk"  # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    user = await get_user(message.from_user.id)

    if user:
        await message.answer(
            t(lang, "start_message.registered").format(phone=user.phone_number),
            reply_markup=main_menu(lang)
        )
    else:
        await message.answer(
            t(lang, "start_message.not_registered"),
            reply_markup=get_phone_keyboard(lang)
        )

@router.message(F.content_type == ContentType.CONTACT)
async def handle_contact(message: Message):
    contact = message.contact
    phone_number = contact.phone_number
    telegram_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(telegram_id)
    if not lang:
        lang = "kk"  # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await add_user(telegram_id, phone_number)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    await message.answer(
        t(lang, "contact.saved").format(phone=phone_number),
        reply_markup=main_menu(lang)
    )

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫"
@router.message(F.text.in_(get_language_buttons_cache()))
async def select_language(message: Message):
    lang = await get_user_language(message.from_user.id) or "kk"
    await message.answer(t(lang, "language.select"), reply_markup=language_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text.in_([f"üåê {lang.upper()}" for lang in LANG_FILES]))
async def select_language_to_test(message: Message):
    text = message.text.strip()

    possible_buttons = [f"üåê {lang.upper()}" for lang in LANG_FILES]
    if text not in possible_buttons:
        return

    lang_code = text.split()[1].lower()  # –¥–æ—Å—Ç–∞—ë–º –∏–º–µ–Ω–Ω–æ –∫–æ–¥: kiril, ru, uz, kk

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥ —è–∑—ã–∫–∞
    await set_user_language(message.from_user.id, lang_code)

    await message.answer(
        t(lang_code, "language.set").format(lang=lang_code.upper()),
        reply_markup=main_menu(lang_code)
    )

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
@router.message(F.text.in_(get_stop_buttons_cache()))
async def stop(message: Message):
    lang = await get_user_language(message.from_user.id) or "kk"
    await message.answer(
        t(lang, "commands.goodbye"),
        reply_markup=main_menu(lang)
    )