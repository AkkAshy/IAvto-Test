from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ContentType
from keyboards.reply import get_phone_keyboard, main_menu, language_menu
from database.db import get_user, add_user
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config.config import LANG_FILES
from database.db import set_user_language, get_user_language
import logging
from services.quiz_service import t

logger = logging.getLogger(__name__)


router = Router()

@router.message(CommandStart())
async def start(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –ë–î)
    lang = await get_user_language(message.from_user.id)

    user = await get_user(message.from_user.id)

    if user:
        await message.answer(
            t(lang, "start_message.registered").format(phone=user.phone_number),
            reply_markup=main_menu(lang)
        )
    else:
        await message.answer(
            t(lang, "start_message.not_registered"),
            reply_markup=get_phone_keyboard(lang)
        )

@router.message(F.content_type == ContentType.CONTACT)
async def handle_contact(message: Message):
    contact = message.contact
    phone_number = contact.phone_number
    telegram_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await add_user(telegram_id, phone_number)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, –±—Ä–æ! –¢–≤–æ–π –Ω–æ–º–µ—Ä: {phone_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üöÄ",
        reply_markup=main_menu()
    )


@router.message(F.text == "üåê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫")
async def select_language(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_menu())



@router.message(F.text.in_([f"üåê {lang.upper()}" for lang in LANG_FILES]))
async def select_language_to_test(message: Message):
    text = message.text.strip()

    possible_buttons = [f"üåê {lang.upper()}" for lang in LANG_FILES]
    if text not in possible_buttons:
        return

    lang_code = text.split()[1].lower()  # –¥–æ—Å—Ç–∞—ë–º –∏–º–µ–Ω–Ω–æ –∫–æ–¥: kiril, ru, uz, kk

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥ —è–∑—ã–∫–∞
    await set_user_language(message.from_user.id, lang_code)

    await message.answer(
        f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {lang_code.upper()} ‚úÖ",
        reply_markup=main_menu()
    )



@router.message(F.text == "üõë –°—Ç–æ–ø")
async def stop(message: Message):
    await message.answer("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –±—Ä–æ! üòé",reply_markup=main_menu())